type Movie {
    _id: ID!
    title: String
    released: Int
    tagline: String
    persons: [Person] @relation (name:"ACTED_IN", direction:"IN")
    directors: [Person] @relation (name:"DIRECTED", direction:"IN")
    producers: [Person] @relation (name:"PRODUCED", direction:"IN")
    writers: [Person] @relation (name:"WROTE", direction:"IN")
    reviews: [MovieReview] @relation (name:"REVIEW_OF", direction:"IN")
}

type Person {
  _id: ID!
  name: String
  born: Int
  acted: [Movie] @relation (name:"ACTED_IN", direction:"OUT")
  directed: [Movie] @relation (name:"DIRECTED", direction:"OUT")
  produced: [Movie] @relation (name:"PRODUCED", direction:"OUT")
  wrote: [Movie] @relation (name:"WROTE", direction:"OUT")
}

type SearchHistory @isAuthenticated {
  query: String
  date: String
  me: String! @neo4j_ignore
}


type MovieReview {
  _id: ID!
  header: String
  review: String
  score: Int
  userId: String
  movie: Movie @relation(name: "REVIEW_OF", direction: "OUT")
}

type Mutation {
#    AddMovieReview(fromMovieReviewID: ID!, toMovieID: ID!): MovieReview @cypher(
#        statement:"""
#        MATCH (from:Person {id: $fromPersonID})
#        MATCH (to:Bio {id: $toBioID})
#        MERGE (from)-[:HAS_BIO]->(to)
#        RETURN from.id, to.id
#        """)

  addMovieReviewsRelation(movieReviewId: ID!, movieId: ID!): MovieReview 
    @cypher(
      statement:"""
      MATCH (n:MovieReview),(k:Movie) 
      WHERE apoc.node.id(n) = $movieReviewId AND apoc.node.id(k) = $movieId 
      CREATE (n)-[r:REVIEW_OF]->(k) 
      RETURN n"""
      )
}


